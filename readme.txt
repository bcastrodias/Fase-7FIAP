
# FIAP - Faculdade de Inform√°tica e Administra√ß√£o Paulista

Projeto Vis√£o Computacional + Integra√ß√µes Agr√≠colas

## üë®‚Äçüéì Integrantes
- Bruno Castro - RM558359: https://www.linkedin.com/in/bruno-castro-dias/
- Hugo Mariano - RM560688: https://www.linkedin.com/in/hugomariano191628150/
- Matheus Castro - RM559293: https://www.linkedin.com/in/matheus-castro-63644b224/

## V√≠deo
https://www.youtube.com/watch?v=gYE-0CWBojc

## üìú Descri√ß√£o

Este projeto aplica t√©cnicas de vis√£o computacional com YOLOv8 e integra solu√ß√µes para automa√ß√£o agr√≠cola. Al√©m da detec√ß√£o autom√°tica de objetos em imagens, ele permite simula√ß√µes de plantio, leitura de sensores e visualiza√ß√£o de c√≥digo IoT, em uma interface multipage constru√≠da com Streamlit.

O projeto foi desenvolvido como parte do curso de Intelig√™ncia Artificial da FIAP.

## üìÅ Estrutura do Projeto

- `models/`: Cont√©m os modelos treinados com YOLOv8.
  - `model_30epochs.pt`, `model_60epochs.pt`, `yolov8n.pt`
  - Subpastas `yolo_30ep/` e `yolo_60ep/` com resultados e weights.

- `pages/`: P√°ginas do aplicativo multipage no Streamlit.
  - `1_assistente_plantacao.py`: C√°lculo de insumos por cultura, safra e √°rea.
  - `2_visualizacao_sensores.py`: Visualiza√ß√£o de sensores pH, umidade e nutrientes.
  - `3_codigo_iot.py`: Exibe c√≥digo .ino usado em ESP32/Arduino.
  - `4_inferencia_yolo.py`: Upload de imagem + infer√™ncia com modelo YOLOv8.

- `dados_farmtech.db`: Banco de dados SQLite local com as leituras dos sensores.
- `Home.py`: P√°gina inicial da aplica√ß√£o multipage no Streamlit.
- `README.md`: Descri√ß√£o inicial do reposit√≥rio.
- `requirements.txt`: Lista de depend√™ncias Python para execu√ß√£o do projeto.

## üß≠ Navega√ß√£o via Dashboard

A `Home.py` fornece bot√µes para navegar entre os seguintes m√≥dulos:

1Ô∏è‚É£ **Assistente de Planta√ß√£o**  
> Estima insumos como f√≥sforo e nitrog√™nio com base na cultura e √°rea.

2Ô∏è‚É£ **Visualiza√ß√£o de Sensores**  
> Mostra valores capturados de sensores de umidade, pH e nutrientes por zona.

3Ô∏è‚É£ **C√≥digo IoT**  
> Permite visualizar o sketch `.ino` usado no ESP32.

4Ô∏è‚É£ **Infer√™ncia com YOLOv8**  
> Permite upload de imagem e realiza detec√ß√£o com `model_60epochs.pt`.

5Ô∏è‚É£ e 6Ô∏è‚É£  
> Reservados para expans√£o futura.


Documenta√ß√£o T√©cnica ‚Äì Mensageria com AWS SNS + SQS + Streamlit
‚Ä¢ Objetivo
Criar uma infraestrutura de mensageria para alertas cr√≠ticos (ex: umidade abaixo de 50%) em uma aplica√ß√£o de monitora‚Ä¢ Arquitetura
[Aplica√ß√£o Streamlit - P√°gina Sensores] ‚Üí (Detecta umidade < 50)
[SNS - Amazon Simple Notification Service] ‚Üí (Publica mensagem)
[SQS - Amazon Simple Queue Service] ‚Üí (Polling via boto3)
[Aplica√ß√£o Streamlit - P√°gina Principal] ‚Üí Exibe alertas (st.toast)
‚Ä¢ Passo a passo de configura√ß√£o
1. Criar o t√≥pico SNS:
 - Acesse o console do SNS e crie um t√≥pico do tipo Standard.
 - Ap√≥s criado, copie o ARN do t√≥pico.
2. Criar a fila SQS:
 - Acesse o console do SQS e crie uma fila do tipo Standard.
 - Copie a Queue URL e o ARN da fila.
3. Assinar a fila SQS ao t√≥pico SNS:
 - No console do SNS, crie uma assinatura usando o protocolo Amazon SQS.
 - Forne√ßa o ARN da fila e aceite a pol√≠tica sugerida.
‚Ä¢ Permiss√µes
Configure um usu√°rio IAM com as pol√≠ticas:
- AmazonSNSFullAccess
- AmazonSQSFullAccess
Use aws configure para autenticar via CLI ou boto3.
‚Ä¢ Integra√ß√£o com Streamlit
1. Enviar alerta ao SNS:
- Utilize boto3 para publicar mensagens usando o TopicArn.
- Exemplo de c√≥digo dispon√≠vel.
2. Receber alertas via SQS:
- Fa√ßa polling com boto3 para verificar mensagens na fila.
- Exiba mensagens com st.toast().
‚Ä¢ Resultado
Ao detectar umidade < 50%, a aplica√ß√£o publica um alerta no SNS.
Esse alerta √© entregue √† fila SQS assinada.
A p√°gina principal do Streamlit l√™ essa fila e exibe a notifica√ß√£o automaticamente.


## üîß Como Executar

1. Instale as depend√™ncias com:

   ```
   pip install -r requirements.txt
   ```

2. Rode o app com:

   ```
   streamlit run Home.py
   ```

3. Use o menu lateral ou bot√µes para navegar entre as p√°ginas do projeto.

## üóÉ Hist√≥rico de vers√µes

- 1.0 - 30/04/2025

## üìã Licen√ßa

Este projeto segue o modelo educacional FIAP e est√° licenciado sob Creative Commons Attribution 4.0 International.
